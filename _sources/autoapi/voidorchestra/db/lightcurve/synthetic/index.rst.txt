voidorchestra.db.lightcurve.synthetic
=====================================

.. py:module:: voidorchestra.db.lightcurve.synthetic

.. autoapi-nested-parse::

   For lightcurves generated from synthetic data



Classes
-------

.. autoapisummary::

   voidorchestra.db.lightcurve.synthetic.LightcurveSynthetic
   voidorchestra.db.lightcurve.synthetic.LightcurveSyntheticRegular


Module Contents
---------------

.. py:class:: LightcurveSynthetic

   Bases: :py:obj:`voidorchestra.db.lightcurve.Lightcurve`


   Synthetic lightcurve with any cadence.

   .. attribute:: rate_mean_value

      Mean rate of simulated observations, unit is 'per second'.

      :type: float

   .. attribute:: rate_mean_units

      The units of the mean rate.

      :type: str

   .. attribute:: qpo_model_id

      The ID of the QPO model this lightcurve uses.

      :type: int

   .. attribute:: qpo_model

      The QPO model used to generate the synthetic lightcurve.

      :type: relationship

   .. attribute:: random_state

      The random seed for the simulation.

      :type: int


   .. py:attribute:: rate_mean_value


   .. py:attribute:: rate_mean_units


   .. py:attribute:: qpo_model_id


   .. py:attribute:: qpo_model


   .. py:attribute:: random_state


   .. py:attribute:: COLUMNS
      :type:  List[str]
      :value: ['rate_mean', 'qpo_model_id']



   .. py:attribute:: __mapper_args__
      :type:  Dict[str, str]


   .. py:method:: get_rate_mean() -> astropy.units.Quantity

      :returns: The mean rate, in counts per second.
      :rtype: Quantity



   .. py:method:: __repr__() -> str
      :abstractmethod:


      Gets the name of the lightcurve.

      :returns: The string representation of the lightcurve.
      :rtype: str



.. py:class:: LightcurveSyntheticRegular

   Bases: :py:obj:`LightcurveSynthetic`


   Synthetic lightcurve with regular cadence.

   .. attribute:: start_time

      First date of the campaign.

      :type: datetime

   .. attribute:: observation_count

      Number of observations.

      :type: int

   .. attribute:: cadence

      Gap between observations, in days.

      :type: float

   .. attribute:: qpo_model

      The QPO model used to generate the synthetic lightcurve.

      :type: relationship


   .. py:attribute:: __mapper_args__
      :type:  Dict[str, str]


   .. py:attribute:: start_time


   .. py:attribute:: observation_count


   .. py:attribute:: cadence_value


   .. py:attribute:: cadence_format


   .. py:attribute:: EXTENSION_FACTOR
      :type:  int
      :value: 2



   .. py:attribute:: COLUMNS
      :type:  List[str]
      :value: ['start_time', 'observation_count', 'cadence']



   .. py:method:: __repr__() -> str

      Gets the name of the lightcurve.



   .. py:method:: get_cadence() -> astropy.time.TimeDelta

      Gets the cadence for these observations, as an Astropy TimeDelta



   .. py:method:: get_data() -> astropy.timeseries.TimeSeries

      Gets a lightcurve generated by the simulator for this method.

      :returns: The lightcurve generated.
      :rtype: TimeSeries



   .. py:method:: load_fixtures(session: sqlalchemy.orm.Session, fixtures_path: pathlib.Path = None) -> None
      :staticmethod:


      Loads the fixtures from disk (if they aren't loaded already)

      :param session: A database session to add the fixtures to
      :type session: Session
      :param fixtures_path: The fixtures JSON file to load the fixtures from
      :type fixtures_path: Path

      :raises FileNotFoundError: If the passed path (or the path in the config file) does not exist
      :raises ValueError: If the file doesn't have the right columns.



