voidorchestra.db.lightcurve.synthetic
=====================================

.. py:module:: voidorchestra.db.lightcurve.synthetic

.. autoapi-nested-parse::

   For lightcurves generated from synthetic data



Classes
-------

.. autoapisummary::

   voidorchestra.db.lightcurve.synthetic.LightcurveSynthetic
   voidorchestra.db.lightcurve.synthetic.LightcurveSyntheticRegular


Module Contents
---------------

.. py:class:: LightcurveSynthetic

   Bases: :py:obj:`voidorchestra.db.lightcurve.Lightcurve`


   Synthetic lightcurve with any cadence.

   .. attribute:: rate_mean_value

      Mean rate of simulated observations, unit is 'per second'.

      :type: float

   .. attribute:: rate_mean_units

      The units of the mean rate.

      :type: str

   .. attribute:: qpo_model_id

      The ID of the QPO model this lightcurve uses.

      :type: int

   .. attribute:: qpo_model

      The QPO model used to generate the synthetic lightcurve.

      :type: relationship

   .. attribute:: random_state

      The random seed for the simulation.

      :type: int


   .. py:attribute:: rate_mean_value
      :type:  sqlalchemy.orm.Mapped[float]


   .. py:attribute:: rate_mean_units
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: exposure_value
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: exposure_units
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: qpo_model_id
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: qpo_model
      :type:  sqlalchemy.orm.Mapped[voidorchestra.db.QPOModel]


   .. py:attribute:: random_state
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: __mapper_args__
      :type:  Dict[str, str]


   .. py:method:: get_rate_mean() -> astropy.units.Quantity

      Gets the mean rate with units.

      :returns: The mean rate, in counts per second.
      :rtype: Quantity



   .. py:method:: __repr__() -> str
      :abstractmethod:


      Gets the name of the lightcurve.

      :returns: The string representation of the lightcurve.
      :rtype: str



.. py:class:: LightcurveSyntheticRegular

   Bases: :py:obj:`LightcurveSynthetic`


   Synthetic lightcurve with regular cadence.

   .. attribute:: observation_start

      First date of the campaign.

      :type: datetime

   .. attribute:: observation_count

      Number of simulated observations.

      :type: int

   .. attribute:: cadence_value

      :ength of time between each observation.

      :type: float

   .. attribute:: cadence_units

      Units of the cadence, in Astropy-parseable format (e.g. 'd', 'days').

      :type: str

   .. attribute:: exposure_value

      Length of exposure for each simulated observation.

      :type: float

   .. attribute:: exposure_units

      Units of the exposure time, in Astropy-parseable format (e.g. 's', 'seconds').

      :type: str


   .. py:attribute:: __mapper_args__
      :type:  Dict[str, str]


   .. py:attribute:: observation_start
      :type:  sqlalchemy.orm.Mapped[datetime.datetime]


   .. py:attribute:: observation_count
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: cadence_value
      :type:  sqlalchemy.orm.Mapped[float]


   .. py:attribute:: cadence_format
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: exposure_value
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: exposure_units
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: EXTENSION_FACTOR
      :type:  int
      :value: 2



   .. py:method:: __repr__() -> str

      Gets the name of the lightcurve.



   .. py:method:: get_exposure() -> astropy.units.Quantity

      Gets the exposure duration for this lightcurve, with units.

      :returns: The exposure duration for these synthetic observations.
      :rtype: Quantity



   .. py:method:: get_cadence() -> astropy.time.TimeDelta

      Gets the cadence for these observations, as an Astropy TimeDelta.

      :returns: The cadence for the synthetic observating campaign.
      :rtype: TimeDelta



   .. py:method:: get_data() -> astropy.timeseries.TimeSeries

      Gets a lightcurve generated by the simulator for this method.

      :returns: **timeseries** -- The lightcurve generated.
      :rtype: TimeSeries



