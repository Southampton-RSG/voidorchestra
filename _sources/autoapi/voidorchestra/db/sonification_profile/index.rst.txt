voidorchestra.db.sonification_profile
=====================================

.. py:module:: voidorchestra.db.sonification_profile

.. autoapi-nested-parse::

   Defines the sonification profiles - a modification of a particular instrument.



Classes
-------

.. autoapisummary::

   voidorchestra.db.sonification_profile.SonificationProfile


Module Contents
---------------

.. py:class:: SonificationProfile

   Bases: :py:obj:`voidorchestra.db.Base`


   ORM class for sonification profiles.

   These are the patterns of sonification that are used to generate sonifications for data.
   They include an instrument, and how it is used.

   .. attribute:: id

      A unique ID for the sonification profile.

      :type: integer

   .. attribute:: sonification_method_id

      The ID of the sonification method used by this profile.

      :type: integer

   .. attribute:: name

      The name of the sonification profile.

      :type: string

   .. attribute:: description

      A description of the sonification profile.

      :type: string

   .. attribute:: tempo

      The speed of the sonification.

      :type: float

   .. attribute:: key

      The note(s) to use for the sonification.

      :type: text

   .. attribute:: sonification_method

      The method used to sonify data as part of this profile.
      Can be synthesizer or instrument samples.

      :type: relationship

   .. attribute:: sonifications

      The sonifications generated using this profile.

      :type: relationship


   .. py:attribute:: __tablename__
      :type:  str
      :value: 'sonification_profile'



   .. py:attribute:: id
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: sonification_method_id
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: name
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: description
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: tempo
      :type:  sqlalchemy.orm.Mapped[float]


   .. py:attribute:: key
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: sonifications
      :type:  sqlalchemy.orm.Mapped[List[voidorchestra.db.Sonification]]


   .. py:attribute:: sonification_method
      :type:  sqlalchemy.orm.Mapped[voidorchestra.db.SonificationMethod]


   .. py:attribute:: subject_sets
      :type:  sqlalchemy.orm.Mapped[voidorchestra.db.SubjectSet]


   .. py:attribute:: COLUMNS
      :type:  List[str]
      :value: ['id', 'sonification_method_id', 'tempo', 'key', 'name', 'description']



   .. py:attribute:: __table_args__


   .. py:method:: __repr__() -> str


   .. py:method:: load_fixtures(session: sqlalchemy.orm.Session, fixtures_path: pathlib.Path = None) -> List[SonificationProfile]
      :staticmethod:


      Loads the fixtures from disk (if they aren't loaded already)

      :param session: A database session to add the fixtures to
      :type session: Session
      :param fixtures_path: The fixtures JSON file to load the fixtures from
      :type fixtures_path: Path

      :raises FileNotFoundError: If the passed path (or the path in the config file) does not exist
      :raises ValueError: If the file doesn't have the right columns.



   .. py:method:: get_key() -> List[str]


   .. py:method:: create_sonification(lightcurve: astropy.timeseries.TimeSeries) -> strauss.sonification.Sonification

      :param lightcurve: The lightcurve to sonify.
      :type lightcurve: TimeSeries

      :returns: The sonified lightcurve.
      :rtype: StraussSonification



