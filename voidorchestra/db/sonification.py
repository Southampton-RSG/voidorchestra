"""
Defines the sonifications used.
"""
from sqlalchemy import Column
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy import Date
from sqlalchemy import ForeignKey
from sqlalchemy import Float

from sqlalchemy.orm import relationship

from voidorchestra.db import Base
from voidorchestra.db.subject import Subject  # pylint: disable=unused-import
from voidorchestra.db.sonification_profile import SonificationProfile  # pylint: disable=unused-import


class Sonification(Base):  # pylint: disable=too-few-public-methods
    """
    ORM class for sonification files.

    This class

    Attributes
    ----------
    sonification_id: integer
        A unique ID for the sonification image
    polymorphic_type: str
        The column used for single-table inheritance
    url: string
        The URL where the image is hosted/available
    filepath_audio:  string
        The filepath to the sound generated.
    filepath_video:  string
        The filepath to the video generated.
    random_seed: int
        The seed of the random number generator used to make this sonification, if valid.
    """
    __tablename__ = "sonification"

    polymorphic_type = Column("polymorphic_type", String(64))

    sonification_id = Column("sonification_id", Integer(), primary_key=True, autoincrement=True)
    sonification_profile_id = Column(
        "sonification_profile_id", Integer,
        ForeignKey("sonification_profile.sonification_profile_id"), nullable=False
    )

    filepath_audio = Column("filepath_audio", String(256))
    filepath_video = Column("filepath_video", String(256))
    hash = Column("hash", String(32), index=True)
    url = Column("url", String(256), unique=True)

    subject = relationship("Subject", back_populates="sonification")
    sonification_profile = relationship("SonificationProfile", back_populates="sonifications")

    def __repr__(self) -> str:
        return f"Sonification(id={self.sonification_id!r})"


class SonificationSynthetic(Sonification):
    """
    ORM class for sonification generated by a synthetic lightcurve.

    This class is used for synthetic sonifications.

    Attributes
    ----------
    random_seed: integer
        The random seed used to generate the synthetic lightcurve.
    """
    random_seed = Column("random_seed", Integer())

    lightcurve_synthetic_id = Column("lightcurve_synthetic_id", Integer())
    subject = relationship("LightcurveSynthetic", back_populates="sonifications")

    __mapper_args__ = {
        'polymorphic_identity': 'sonification_synthetic',
        'polymorphic_on': 'polymorphic_type',
    }

    def __repr__(self) -> str:
        return f"SonificationSynthetic(id={self.sonification_id!r})"
